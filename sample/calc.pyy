/* Calculator in kmyacc + Python. */

%{
%}


%token NUMBER IDENTIFIER

%left '+' '-'
%left '*' '/'

%%

start:	line;

/*
lines:
	| lines line { $$ = $1 + $2 }
	;
*/

line	: expr	{ print $1 }
	| { $$ = "(empty line ignored)" }
	| error { $$ = "" }
	;

expr	: expr '+' expr { $$ = $1 + $3 }
	| expr '-' expr { $$ = $1 - $3 }
	| expr '*' expr { $$ = $1 * $3 }
	| expr '/' expr { $$ = $1 / $3 }
	| '(' expr ')' { $$ = $2 }
	| NUMBER { $$ = $1 }
	;

%%

''' Lexical analyzer '''

buffer = "5 * 6 + 7 * 8"
token = None
toktype = None


def isletter(c):
	return (ord('a') <= ord(c) and ord(c) <= ord('z')) or (ord('A') <= ord(c) and ord(c) <= ord('Z'))

def isdigit(c):
	return (ord('0') <= ord(c) and ord(c) <= ord('9'))

def yylex():
	global buffer, token, toktype, yylval
	while len(buffer) > 0 and (buffer[0] == ' ' or buffer[0] == '\t'):
		buffer = buffer[1:]
	if len(buffer) == 0:
		return 0
	if isletter(buffer[0]):
		i = 0
		while i < len(buffer):
			if not isletter(buffer[i]) and not isdigit(buffer[i]):
				break
			i = i + 1
		token = buffer[:i]
		buffer = buffer[i:]
		return IDENTIFIER
	elif isdigit(buffer[0]):
		i = 0
		while i < len(buffer):
			if not isdigit(buffer[i]):
				break
			i = i + 1
		token = buffer[:i]
		buffer = buffer[i:]
		yylval = int(token)
		return NUMBER
	else:
		token = buffer[:1]
		buffer = buffer[1:]
		return ord(token[0])

def yyerror(msg):
	yyprintln(msg)

print buffer
yyparse()
